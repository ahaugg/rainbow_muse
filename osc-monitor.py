import argparse
from pythonosc import dispatcher
from pythonosc import osc_server


"""
Read Muse data from an OSC stream as generated by e.g. Muse Monitor
for iOS and Android
"""
from phue import Bridge
from datetime import timedelta
import time
import arrow
import random


def make_color(b, values):
    lights = b.get_light_objects()
    for light in lights:
        if light.on:
            light.brightness = random.randint(0,250)
            light.xy = [random.random(), random.random()]
    time.sleep(5)


def eeg_handler(unused_addr, args, ch1, ch2, ch3, ch4, ch5):
    electrodes = [str(i) for i in [ch1, ch2, ch3, ch4, ch5]]
    #print("EEG\t{}".format("\t".join(electrodes)))
    global last_update
    if last_update + timedelta(seconds=1) < arrow.now():
        last_update = arrow.now()
        make_color(args[0], 'foobar')


def acc_handler(unused_addr, args, x, y, z):
    axes = [str(i) for i in [x, y, z]]
    print("ACC\t{}".format("\t".join(axes)))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--ip",
                        default="127.0.0.1",
                        help="The ip to listen on")
    parser.add_argument("--port",
                        type=int,
                        default=5000,
                        help="The port to listen on")
    args = parser.parse_args()
    try:
        b = Bridge('192.168.0.100')
        last_update = arrow.now()
    except:
        pass

    dispatcher = dispatcher.Dispatcher()
    # dispatcher.map("/muse*", print)
    dispatcher.map("/muse/eeg", eeg_handler, b)
    # dispatcher.map("/muse/acc", acc_handler, "ACC")
    # dispatcher.map("/muse/eeg", print)

    server = osc_server.ThreadingOSCUDPServer(
        (args.ip, args.port), dispatcher)
    print("Serving on {}".format(server.server_address))
    server.serve_forever()
